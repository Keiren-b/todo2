(()=>{"use strict";var e={426:(e,t,n)=>{n.d(t,{Z:()=>d});var o=n(537),i=n.n(o),a=n(645),r=n.n(a)()(i());r.push([e.id,".container {\n    background-color: lightcoral;\n}\n\n.hidden {\n    display: none;\n}\n\n#taskContainer {\n    display: flex;\n}\n\n#inputContainer.hidden {\n    display: none;\n}\n\n#inputContainer {\n    display: flex;\n    flex-direction: column;\n}\n\n.projectModal {\n    /* display: none; Hidden by default */\n    position: fixed; /* Stay in place */\n    z-index: 1; /* Sit on top */\n    left: 0;\n    top: 0;\n    width: 100%; /* Full width */\n    height: 100%; /* Full height */\n    overflow: auto; /* Enable scroll if needed */\n    background-color: rgb(0,0,0); /* Fallback color */\n    background-color: rgba(0,0,0,0.4); /* Black w/ opacity */\n}\n\n.sidebarSelect{\n    background-color: cornsilk;\n}","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;IACI,4BAA4B;AAChC;;AAEA;IACI,aAAa;AACjB;;AAEA;IACI,aAAa;AACjB;;AAEA;IACI,aAAa;AACjB;;AAEA;IACI,aAAa;IACb,sBAAsB;AAC1B;;AAEA;IACI,qCAAqC;IACrC,eAAe,EAAE,kBAAkB;IACnC,UAAU,EAAE,eAAe;IAC3B,OAAO;IACP,MAAM;IACN,WAAW,EAAE,eAAe;IAC5B,YAAY,EAAE,gBAAgB;IAC9B,cAAc,EAAE,4BAA4B;IAC5C,4BAA4B,EAAE,mBAAmB;IACjD,iCAAiC,EAAE,qBAAqB;AAC5D;;AAEA;IACI,0BAA0B;AAC9B",sourcesContent:[".container {\n    background-color: lightcoral;\n}\n\n.hidden {\n    display: none;\n}\n\n#taskContainer {\n    display: flex;\n}\n\n#inputContainer.hidden {\n    display: none;\n}\n\n#inputContainer {\n    display: flex;\n    flex-direction: column;\n}\n\n.projectModal {\n    /* display: none; Hidden by default */\n    position: fixed; /* Stay in place */\n    z-index: 1; /* Sit on top */\n    left: 0;\n    top: 0;\n    width: 100%; /* Full width */\n    height: 100%; /* Full height */\n    overflow: auto; /* Enable scroll if needed */\n    background-color: rgb(0,0,0); /* Fallback color */\n    background-color: rgba(0,0,0,0.4); /* Black w/ opacity */\n}\n\n.sidebarSelect{\n    background-color: cornsilk;\n}"],sourceRoot:""}]);const d=r},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",o=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),o&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),o&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,o,i,a){"string"==typeof e&&(e=[[null,e,void 0]]);var r={};if(o)for(var d=0;d<this.length;d++){var c=this[d][0];null!=c&&(r[c]=!0)}for(var l=0;l<e.length;l++){var s=[].concat(e[l]);o&&r[s[0]]||(void 0!==a&&(void 0===s[5]||(s[1]="@layer".concat(s[5].length>0?" ".concat(s[5]):""," {").concat(s[1],"}")),s[5]=a),n&&(s[2]?(s[1]="@media ".concat(s[2]," {").concat(s[1],"}"),s[2]=n):s[2]=n),i&&(s[4]?(s[1]="@supports (".concat(s[4],") {").concat(s[1],"}"),s[4]=i):s[4]="".concat(i)),t.push(s))}},t}},537:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),i="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),a="/*# ".concat(i," */");return[t].concat([a]).join("\n")}return[t].join("\n")}},379:e=>{var t=[];function n(e){for(var n=-1,o=0;o<t.length;o++)if(t[o].identifier===e){n=o;break}return n}function o(e,o){for(var a={},r=[],d=0;d<e.length;d++){var c=e[d],l=o.base?c[0]+o.base:c[0],s=a[l]||0,u="".concat(l," ").concat(s);a[l]=s+1;var p=n(u),m={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==p)t[p].references++,t[p].updater(m);else{var A=i(m,o);o.byIndex=d,t.splice(d,0,{identifier:u,updater:A,references:1})}r.push(u)}return r}function i(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,i){var a=o(e=e||[],i=i||{});return function(e){e=e||[];for(var r=0;r<a.length;r++){var d=n(a[r]);t[d].references--}for(var c=o(e,i),l=0;l<a.length;l++){var s=n(a[l]);0===t[s].references&&(t[s].updater(),t.splice(s,1))}a=c}}},569:e=>{var t={};e.exports=function(e,n){var o=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(n)}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var o="";n.supports&&(o+="@supports (".concat(n.supports,") {")),n.media&&(o+="@media ".concat(n.media," {"));var i=void 0!==n.layer;i&&(o+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),o+=n.css,i&&(o+="}"),n.media&&(o+="}"),n.supports&&(o+="}");var a=n.sourceMap;a&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),t.styleTagTransform(o,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}}},t={};function n(o){var i=t[o];if(void 0!==i)return i.exports;var a=t[o]={id:o,exports:{}};return e[o](a,a.exports,n),a.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var o in t)n.o(t,o)&&!n.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.nc=void 0,(()=>{const e={name:""},t=function(){return e.name},o=()=>{const t=document.getElementById("sidebar");for(;t.childElementCount>1;)t.removeChild(t.lastChild);for(let n=0;n<=localStorage.length;n++){const o=localStorage.key(n),i=document.createElement("div"),a=document.getElementById("inputContainer");i.setAttribute("id","bar"),i.textContent=o,t.appendChild(i),i.addEventListener("click",(()=>{e.name=event.target.textContent,r(),a.classList.remove("hidden")}))}};function i(e,t,n,o,i){this.title=e,this.description=t,this.dueDate=n,this.priority=o,this.notes=i}const a=function(){const e=document.getElementById("inputContainer");for(let t=0;t<e.childElementCount;t++)"LABEL"!==e.children[t].nodeName&&(e.children[t].value="");e.classList.add("hidden")},r=function(){const e=document.getElementById("taskDisplay"),n=t();for(;e.childElementCount>1;)e.removeChild(e.lastChild);let o=localStorage.getItem(n);if(""!==o&&(o=JSON.parse(o)),""!==n)for(let t=0;t<Object.keys(o).length;t++){console.log(o);const n=document.createElement("div");n.setAttribute("id","card"),e.appendChild(n);const i=document.createElement("div");i.setAttribute("id","cardTitle"),i.textContent=Object.values(o)[t].title,n.appendChild(i);const a=document.createElement("div");a.setAttribute("id","cardDesc"),a.textContent=Object.values(o)[t].description,n.appendChild(a);const r=document.createElement("div");r.setAttribute("id","cardDue"),r.textContent=Object.values(o)[t].date,n.appendChild(r);const d=document.createElement("div");d.setAttribute("id","cardPriority"),d.textContent=Object.values(o)[t].priority,n.appendChild(d);const c=document.createElement("div");c.setAttribute("id","cardNotes"),c.textContent=Object.values(o)[t].notes,n.appendChild(c)}};var d=n(379),c=n.n(d),l=n(795),s=n.n(l),u=n(569),p=n.n(u),m=n(565),A=n.n(m),h=n(216),C=n.n(h),f=n(589),v=n.n(f),b=n(426),g={};g.styleTagTransform=v(),g.setAttributes=A(),g.insert=p().bind(null,"head"),g.domAPI=s(),g.insertStyleElement=C(),c()(b.Z,g),b.Z&&b.Z.locals&&b.Z.locals,function(){const n=document.getElementById("content"),d=document.createElement("div");d.textContent="This is my header",d.setAttribute("id","header"),n.appendChild(d),d.classList.add("container");const c=document.createElement("div");c.setAttribute("id","taskContainer"),c.style.backgroundColor="grey",n.appendChild(c);const l=document.createElement("div");l.setAttribute("id","sidebar"),l.textContent="This is my sidebar",c.appendChild(l);const s=document.createElement("div");s.setAttribute("id","projectMenu"),l.appendChild(s);const u=document.createElement("button");u.textContent="Add New Project",u.setAttribute("id","newProjectBtn"),s.appendChild(u);const p=document.createElement("button");p.textContent="Add New Task",p.setAttribute("id","newTaskBtn"),s.appendChild(p),p.classList.add("hidden"),p.addEventListener("click",(()=>{document.getElementById("inputContainer").classList.remove("hidden")}));const m=document.createElement("div");m.setAttribute("id","taskDisplay"),m.textContent="This is my task display",c.appendChild(m);const A=document.createElement("button");A.textContent="CLEAR",A.addEventListener("click",(()=>localStorage.clear()));const h=document.createElement("button");h.textContent="ppp";const C=document.createElement("div");n.appendChild(C),C.appendChild(A),C.appendChild(h),(()=>{const e=document.getElementById("taskDisplay"),n=document.createElement("div");n.setAttribute("id","inputContainer"),n.classList.add("hidden");const o=document.createElement("input");o.name="Title",o.setAttribute("id","title");const r=document.createElement("Label");r.setAttribute("for",o),r.innerHTML="Title: ",n.appendChild(r),n.appendChild(o);const d=document.createElement("textarea");d.name="Description",d.setAttribute("id","desc");const c=document.createElement("Label");c.setAttribute("for",d),c.innerHTML="Description: ",n.appendChild(c),n.appendChild(d);const l=document.createElement("input");l.type="date",l.name="Due",l.setAttribute("id","due");const s=document.createElement("Label");s.setAttribute("for",l),s.innerHTML="Due Date: ",n.appendChild(s),n.appendChild(l);const u=document.createElement("select");u.name="Priority",u.setAttribute("id","priority");let p=["Low","Medium","High","Ugent"];for(const e of p){var m=document.createElement("option");m.value=e,m.text=e.charAt(0).toUpperCase()+e.slice(1),u.appendChild(m)}const A=document.createElement("Label");A.setAttribute("for",u),A.innerHTML="Priority: ",n.appendChild(A),n.appendChild(u);const h=document.createElement("textarea");h.name="Notes",h.setAttribute("id","notes");const C=document.createElement("Label");C.setAttribute("for",u),C.innerHTML="Notes: ",n.appendChild(C),n.appendChild(h);const f=document.createElement("button");f.textContent="Add To-Do",f.setAttribute("id","printBtn"),n.appendChild(f),f.addEventListener("click",(()=>{(function(e){let n=t();if(null==localStorage.getItem(e.title))if(""==localStorage.getItem(n)){let t={[e.title]:e};localStorage.setItem(n,JSON.stringify(t)),console.log(localStorage)}else{let t=JSON.parse(localStorage.getItem(n)),o={[e.title]:e};t=Object.assign(t,o),localStorage.setItem(n,JSON.stringify(t))}else alert("This Task Already Exists. Choose another name")})(new i(document.getElementById("title").value,document.getElementById("desc").value,document.getElementById("due").value,document.getElementById("priority").value,document.getElementById("notes").value)),a()})),e.appendChild(n),function(){const e=document.getElementById("inputContainer");for(let t=0;t<e.children.length;t++)t%2!=0&&(5==t&&(e.children[t].value="2001-01-01"),e.children[t].value=7==t?"High":"test Value")}()})(),o(),function(){const t=document.getElementById("content"),n=document.createElement("div");n.setAttribute("id","projectModal"),n.classList.add("projectModal"),n.classList.add("hidden"),t.appendChild(n);const i=document.createElement("div");i.setAttribute("id","modalHeader"),i.textContent="Add New Project",n.appendChild(i);const a=document.createElement("div");a.setAttribute("id","modalInputContainer"),n.appendChild(a);const r=document.createElement("input");r.name="Title",r.setAttribute("id","projectTitle");const d=document.createElement("Label");d.setAttribute("for",r),d.innerHTML="Title: ",a.appendChild(d),a.appendChild(r);const c=document.createElement("button");c.setAttribute("id","cancelBtn"),c.textContent="Cancel",a.appendChild(c);const l=document.createElement("button");l.setAttribute("id","addBtn"),l.textContent="Add",l.addEventListener("click",(()=>{(function(){let t=document.getElementById("projectModal"),n=document.getElementById("projectTitle");if("addBtn"==event.currentTarget.getAttribute("id")){if(null!=localStorage.getItem(n.value))return void alert("This Project Already Exists. Choose another name");localStorage.setItem(n.value,""),e.name=n.value}t.classList.add("hidden"),inputContainer.classList.remove("hidden")})(),o()})),a.appendChild(l)}(),function(){const e=document.getElementById("projectModal"),t=document.getElementById("newTaskBtn"),n=document.getElementById("newProjectBtn"),o=document.getElementById("cancelBtn");n.onclick=function(){e.classList.remove("hidden"),t.classList.remove("hidden")},o.onclick=function(){e.classList.add("hidden")},window.onclick=function(t){t.target==e&&e.classList.add("hidden")}}(),r()}(),localStorage.setItem("housework",JSON.stringify({washing:{title:"wash dishes",description:"wash the dishes",date:"2023-01-01",priority:"high",notes:"there are no notes"},cooking:{title:"cook dinner",description:"cook the dinner",date:"2023-02-01",priority:"low",notes:"there are some notes"},yard:{title:"cut grass",description:"cut the grass",date:"2023-02-01",priority:"med",notes:"there are so many notes notes"}}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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dXJjZXMiOlsid2VicGFjazovL3RvZG8yLy4vc3JjL3N0eWxlLmNzcyIsIndlYnBhY2s6Ly90b2RvMi8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanMiLCJ3ZWJwYWNrOi8vdG9kbzIvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qcyIsIndlYnBhY2s6Ly90b2RvMi8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qcyIsIndlYnBhY2s6Ly90b2RvMi8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanMiLCJ3ZWJwYWNrOi8vdG9kbzIvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanMiLCJ3ZWJwYWNrOi8vdG9kbzIvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanMiLCJ3ZWJwYWNrOi8vdG9kbzIvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qcyIsIndlYnBhY2s6Ly90b2RvMi8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzIiwid2VicGFjazovL3RvZG8yL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL3RvZG8yL3dlYnBhY2svcnVudGltZS9jb21wYXQgZ2V0IGRlZmF1bHQgZXhwb3J0Iiwid2VicGFjazovL3RvZG8yL3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly90b2RvMi93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL3RvZG8yL3dlYnBhY2svcnVudGltZS9ub25jZSIsIndlYnBhY2s6Ly90b2RvMi8uL3NyYy9wcm9qZWN0LmpzIiwid2VicGFjazovL3RvZG8yLy4vc3JjL3Rhc2suanMiLCJ3ZWJwYWNrOi8vdG9kbzIvLi9zcmMvc3R5bGUuY3NzPzcxNjMiLCJ3ZWJwYWNrOi8vdG9kbzIvLi9zcmMvcGFnZUxvYWQuanMiLCJ3ZWJwYWNrOi8vdG9kbzIvLi9zcmMvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gSW1wb3J0c1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18gZnJvbSBcIi4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgYC5jb250YWluZXIge1xuICAgIGJhY2tncm91bmQtY29sb3I6IGxpZ2h0Y29yYWw7XG59XG5cbi5oaWRkZW4ge1xuICAgIGRpc3BsYXk6IG5vbmU7XG59XG5cbiN0YXNrQ29udGFpbmVyIHtcbiAgICBkaXNwbGF5OiBmbGV4O1xufVxuXG4jaW5wdXRDb250YWluZXIuaGlkZGVuIHtcbiAgICBkaXNwbGF5OiBub25lO1xufVxuXG4jaW5wdXRDb250YWluZXIge1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbn1cblxuLnByb2plY3RNb2RhbCB7XG4gICAgLyogZGlzcGxheTogbm9uZTsgSGlkZGVuIGJ5IGRlZmF1bHQgKi9cbiAgICBwb3NpdGlvbjogZml4ZWQ7IC8qIFN0YXkgaW4gcGxhY2UgKi9cbiAgICB6LWluZGV4OiAxOyAvKiBTaXQgb24gdG9wICovXG4gICAgbGVmdDogMDtcbiAgICB0b3A6IDA7XG4gICAgd2lkdGg6IDEwMCU7IC8qIEZ1bGwgd2lkdGggKi9cbiAgICBoZWlnaHQ6IDEwMCU7IC8qIEZ1bGwgaGVpZ2h0ICovXG4gICAgb3ZlcmZsb3c6IGF1dG87IC8qIEVuYWJsZSBzY3JvbGwgaWYgbmVlZGVkICovXG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmdiKDAsMCwwKTsgLyogRmFsbGJhY2sgY29sb3IgKi9cbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDAsMCwwLDAuNCk7IC8qIEJsYWNrIHcvIG9wYWNpdHkgKi9cbn1cblxuLnNpZGViYXJTZWxlY3R7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogY29ybnNpbGs7XG59YCwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvc3R5bGUuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBO0lBQ0ksNEJBQTRCO0FBQ2hDOztBQUVBO0lBQ0ksYUFBYTtBQUNqQjs7QUFFQTtJQUNJLGFBQWE7QUFDakI7O0FBRUE7SUFDSSxhQUFhO0FBQ2pCOztBQUVBO0lBQ0ksYUFBYTtJQUNiLHNCQUFzQjtBQUMxQjs7QUFFQTtJQUNJLHFDQUFxQztJQUNyQyxlQUFlLEVBQUUsa0JBQWtCO0lBQ25DLFVBQVUsRUFBRSxlQUFlO0lBQzNCLE9BQU87SUFDUCxNQUFNO0lBQ04sV0FBVyxFQUFFLGVBQWU7SUFDNUIsWUFBWSxFQUFFLGdCQUFnQjtJQUM5QixjQUFjLEVBQUUsNEJBQTRCO0lBQzVDLDRCQUE0QixFQUFFLG1CQUFtQjtJQUNqRCxpQ0FBaUMsRUFBRSxxQkFBcUI7QUFDNUQ7O0FBRUE7SUFDSSwwQkFBMEI7QUFDOUJcIixcInNvdXJjZXNDb250ZW50XCI6W1wiLmNvbnRhaW5lciB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IGxpZ2h0Y29yYWw7XFxufVxcblxcbi5oaWRkZW4ge1xcbiAgICBkaXNwbGF5OiBub25lO1xcbn1cXG5cXG4jdGFza0NvbnRhaW5lciB7XFxuICAgIGRpc3BsYXk6IGZsZXg7XFxufVxcblxcbiNpbnB1dENvbnRhaW5lci5oaWRkZW4ge1xcbiAgICBkaXNwbGF5OiBub25lO1xcbn1cXG5cXG4jaW5wdXRDb250YWluZXIge1xcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbn1cXG5cXG4ucHJvamVjdE1vZGFsIHtcXG4gICAgLyogZGlzcGxheTogbm9uZTsgSGlkZGVuIGJ5IGRlZmF1bHQgKi9cXG4gICAgcG9zaXRpb246IGZpeGVkOyAvKiBTdGF5IGluIHBsYWNlICovXFxuICAgIHotaW5kZXg6IDE7IC8qIFNpdCBvbiB0b3AgKi9cXG4gICAgbGVmdDogMDtcXG4gICAgdG9wOiAwO1xcbiAgICB3aWR0aDogMTAwJTsgLyogRnVsbCB3aWR0aCAqL1xcbiAgICBoZWlnaHQ6IDEwMCU7IC8qIEZ1bGwgaGVpZ2h0ICovXFxuICAgIG92ZXJmbG93OiBhdXRvOyAvKiBFbmFibGUgc2Nyb2xsIGlmIG5lZWRlZCAqL1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoMCwwLDApOyAvKiBGYWxsYmFjayBjb2xvciAqL1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDAsMCwwLDAuNCk7IC8qIEJsYWNrIHcvIG9wYWNpdHkgKi9cXG59XFxuXFxuLnNpZGViYXJTZWxlY3R7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IGNvcm5zaWxrO1xcbn1cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qXG4gIE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG4gIEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKSB7XG4gIHZhciBsaXN0ID0gW107XG5cbiAgLy8gcmV0dXJuIHRoZSBsaXN0IG9mIG1vZHVsZXMgYXMgY3NzIHN0cmluZ1xuICBsaXN0LnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICB2YXIgY29udGVudCA9IFwiXCI7XG4gICAgICB2YXIgbmVlZExheWVyID0gdHlwZW9mIGl0ZW1bNV0gIT09IFwidW5kZWZpbmVkXCI7XG4gICAgICBpZiAoaXRlbVs0XSkge1xuICAgICAgICBjb250ZW50ICs9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQoaXRlbVs0XSwgXCIpIHtcIik7XG4gICAgICB9XG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICBjb250ZW50ICs9IFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIiB7XCIpO1xuICAgICAgfVxuICAgICAgaWYgKG5lZWRMYXllcikge1xuICAgICAgICBjb250ZW50ICs9IFwiQGxheWVyXCIuY29uY2F0KGl0ZW1bNV0ubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChpdGVtWzVdKSA6IFwiXCIsIFwiIHtcIik7XG4gICAgICB9XG4gICAgICBjb250ZW50ICs9IGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSk7XG4gICAgICBpZiAobmVlZExheWVyKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuICAgICAgaWYgKGl0ZW1bNF0pIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cbiAgICAgIHJldHVybiBjb250ZW50O1xuICAgIH0pLmpvaW4oXCJcIik7XG4gIH07XG5cbiAgLy8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3RcbiAgbGlzdC5pID0gZnVuY3Rpb24gaShtb2R1bGVzLCBtZWRpYSwgZGVkdXBlLCBzdXBwb3J0cywgbGF5ZXIpIHtcbiAgICBpZiAodHlwZW9mIG1vZHVsZXMgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIG1vZHVsZXMgPSBbW251bGwsIG1vZHVsZXMsIHVuZGVmaW5lZF1dO1xuICAgIH1cbiAgICB2YXIgYWxyZWFkeUltcG9ydGVkTW9kdWxlcyA9IHt9O1xuICAgIGlmIChkZWR1cGUpIHtcbiAgICAgIGZvciAodmFyIGsgPSAwOyBrIDwgdGhpcy5sZW5ndGg7IGsrKykge1xuICAgICAgICB2YXIgaWQgPSB0aGlzW2tdWzBdO1xuICAgICAgICBpZiAoaWQgIT0gbnVsbCkge1xuICAgICAgICAgIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaWRdID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBmb3IgKHZhciBfayA9IDA7IF9rIDwgbW9kdWxlcy5sZW5ndGg7IF9rKyspIHtcbiAgICAgIHZhciBpdGVtID0gW10uY29uY2F0KG1vZHVsZXNbX2tdKTtcbiAgICAgIGlmIChkZWR1cGUgJiYgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpdGVtWzBdXSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgbGF5ZXIgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBpdGVtWzVdID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgaXRlbVs1XSA9IGxheWVyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBsYXllclwiLmNvbmNhdChpdGVtWzVdLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQoaXRlbVs1XSkgOiBcIlwiLCBcIiB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVs1XSA9IGxheWVyO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAobWVkaWEpIHtcbiAgICAgICAgaWYgKCFpdGVtWzJdKSB7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHN1cHBvcnRzKSB7XG4gICAgICAgIGlmICghaXRlbVs0XSkge1xuICAgICAgICAgIGl0ZW1bNF0gPSBcIlwiLmNvbmNhdChzdXBwb3J0cyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQoaXRlbVs0XSwgXCIpIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzRdID0gc3VwcG9ydHM7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGxpc3QucHVzaChpdGVtKTtcbiAgICB9XG4gIH07XG4gIHJldHVybiBsaXN0O1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlbSkge1xuICB2YXIgY29udGVudCA9IGl0ZW1bMV07XG4gIHZhciBjc3NNYXBwaW5nID0gaXRlbVszXTtcbiAgaWYgKCFjc3NNYXBwaW5nKSB7XG4gICAgcmV0dXJuIGNvbnRlbnQ7XG4gIH1cbiAgaWYgKHR5cGVvZiBidG9hID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICB2YXIgYmFzZTY0ID0gYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoY3NzTWFwcGluZykpKSk7XG4gICAgdmFyIGRhdGEgPSBcInNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LFwiLmNvbmNhdChiYXNlNjQpO1xuICAgIHZhciBzb3VyY2VNYXBwaW5nID0gXCIvKiMgXCIuY29uY2F0KGRhdGEsIFwiICovXCIpO1xuICAgIHJldHVybiBbY29udGVudF0uY29uY2F0KFtzb3VyY2VNYXBwaW5nXSkuam9pbihcIlxcblwiKTtcbiAgfVxuICByZXR1cm4gW2NvbnRlbnRdLmpvaW4oXCJcXG5cIik7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgc3R5bGVzSW5ET00gPSBbXTtcbmZ1bmN0aW9uIGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpIHtcbiAgdmFyIHJlc3VsdCA9IC0xO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlc0luRE9NLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHN0eWxlc0luRE9NW2ldLmlkZW50aWZpZXIgPT09IGlkZW50aWZpZXIpIHtcbiAgICAgIHJlc3VsdCA9IGk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKSB7XG4gIHZhciBpZENvdW50TWFwID0ge307XG4gIHZhciBpZGVudGlmaWVycyA9IFtdO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgaXRlbSA9IGxpc3RbaV07XG4gICAgdmFyIGlkID0gb3B0aW9ucy5iYXNlID8gaXRlbVswXSArIG9wdGlvbnMuYmFzZSA6IGl0ZW1bMF07XG4gICAgdmFyIGNvdW50ID0gaWRDb3VudE1hcFtpZF0gfHwgMDtcbiAgICB2YXIgaWRlbnRpZmllciA9IFwiXCIuY29uY2F0KGlkLCBcIiBcIikuY29uY2F0KGNvdW50KTtcbiAgICBpZENvdW50TWFwW2lkXSA9IGNvdW50ICsgMTtcbiAgICB2YXIgaW5kZXhCeUlkZW50aWZpZXIgPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICB2YXIgb2JqID0ge1xuICAgICAgY3NzOiBpdGVtWzFdLFxuICAgICAgbWVkaWE6IGl0ZW1bMl0sXG4gICAgICBzb3VyY2VNYXA6IGl0ZW1bM10sXG4gICAgICBzdXBwb3J0czogaXRlbVs0XSxcbiAgICAgIGxheWVyOiBpdGVtWzVdXG4gICAgfTtcbiAgICBpZiAoaW5kZXhCeUlkZW50aWZpZXIgIT09IC0xKSB7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleEJ5SWRlbnRpZmllcl0ucmVmZXJlbmNlcysrO1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhCeUlkZW50aWZpZXJdLnVwZGF0ZXIob2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHVwZGF0ZXIgPSBhZGRFbGVtZW50U3R5bGUob2JqLCBvcHRpb25zKTtcbiAgICAgIG9wdGlvbnMuYnlJbmRleCA9IGk7XG4gICAgICBzdHlsZXNJbkRPTS5zcGxpY2UoaSwgMCwge1xuICAgICAgICBpZGVudGlmaWVyOiBpZGVudGlmaWVyLFxuICAgICAgICB1cGRhdGVyOiB1cGRhdGVyLFxuICAgICAgICByZWZlcmVuY2VzOiAxXG4gICAgICB9KTtcbiAgICB9XG4gICAgaWRlbnRpZmllcnMucHVzaChpZGVudGlmaWVyKTtcbiAgfVxuICByZXR1cm4gaWRlbnRpZmllcnM7XG59XG5mdW5jdGlvbiBhZGRFbGVtZW50U3R5bGUob2JqLCBvcHRpb25zKSB7XG4gIHZhciBhcGkgPSBvcHRpb25zLmRvbUFQSShvcHRpb25zKTtcbiAgYXBpLnVwZGF0ZShvYmopO1xuICB2YXIgdXBkYXRlciA9IGZ1bmN0aW9uIHVwZGF0ZXIobmV3T2JqKSB7XG4gICAgaWYgKG5ld09iaikge1xuICAgICAgaWYgKG5ld09iai5jc3MgPT09IG9iai5jc3MgJiYgbmV3T2JqLm1lZGlhID09PSBvYmoubWVkaWEgJiYgbmV3T2JqLnNvdXJjZU1hcCA9PT0gb2JqLnNvdXJjZU1hcCAmJiBuZXdPYmouc3VwcG9ydHMgPT09IG9iai5zdXBwb3J0cyAmJiBuZXdPYmoubGF5ZXIgPT09IG9iai5sYXllcikge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBhcGkudXBkYXRlKG9iaiA9IG5ld09iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFwaS5yZW1vdmUoKTtcbiAgICB9XG4gIH07XG4gIHJldHVybiB1cGRhdGVyO1xufVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobGlzdCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgbGlzdCA9IGxpc3QgfHwgW107XG4gIHZhciBsYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucyk7XG4gIHJldHVybiBmdW5jdGlvbiB1cGRhdGUobmV3TGlzdCkge1xuICAgIG5ld0xpc3QgPSBuZXdMaXN0IHx8IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tpXTtcbiAgICAgIHZhciBpbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhdLnJlZmVyZW5jZXMtLTtcbiAgICB9XG4gICAgdmFyIG5ld0xhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShuZXdMaXN0LCBvcHRpb25zKTtcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIF9pZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW19pXTtcbiAgICAgIHZhciBfaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihfaWRlbnRpZmllcik7XG4gICAgICBpZiAoc3R5bGVzSW5ET01bX2luZGV4XS5yZWZlcmVuY2VzID09PSAwKSB7XG4gICAgICAgIHN0eWxlc0luRE9NW19pbmRleF0udXBkYXRlcigpO1xuICAgICAgICBzdHlsZXNJbkRPTS5zcGxpY2UoX2luZGV4LCAxKTtcbiAgICAgIH1cbiAgICB9XG4gICAgbGFzdElkZW50aWZpZXJzID0gbmV3TGFzdElkZW50aWZpZXJzO1xuICB9O1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIG1lbW8gPSB7fTtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBnZXRUYXJnZXQodGFyZ2V0KSB7XG4gIGlmICh0eXBlb2YgbWVtb1t0YXJnZXRdID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgdmFyIHN0eWxlVGFyZ2V0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpO1xuXG4gICAgLy8gU3BlY2lhbCBjYXNlIHRvIHJldHVybiBoZWFkIG9mIGlmcmFtZSBpbnN0ZWFkIG9mIGlmcmFtZSBpdHNlbGZcbiAgICBpZiAod2luZG93LkhUTUxJRnJhbWVFbGVtZW50ICYmIHN0eWxlVGFyZ2V0IGluc3RhbmNlb2Ygd2luZG93LkhUTUxJRnJhbWVFbGVtZW50KSB7XG4gICAgICB0cnkge1xuICAgICAgICAvLyBUaGlzIHdpbGwgdGhyb3cgYW4gZXhjZXB0aW9uIGlmIGFjY2VzcyB0byBpZnJhbWUgaXMgYmxvY2tlZFxuICAgICAgICAvLyBkdWUgdG8gY3Jvc3Mtb3JpZ2luIHJlc3RyaWN0aW9uc1xuICAgICAgICBzdHlsZVRhcmdldCA9IHN0eWxlVGFyZ2V0LmNvbnRlbnREb2N1bWVudC5oZWFkO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyBpc3RhbmJ1bCBpZ25vcmUgbmV4dFxuICAgICAgICBzdHlsZVRhcmdldCA9IG51bGw7XG4gICAgICB9XG4gICAgfVxuICAgIG1lbW9bdGFyZ2V0XSA9IHN0eWxlVGFyZ2V0O1xuICB9XG4gIHJldHVybiBtZW1vW3RhcmdldF07XG59XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gaW5zZXJ0QnlTZWxlY3RvcihpbnNlcnQsIHN0eWxlKSB7XG4gIHZhciB0YXJnZXQgPSBnZXRUYXJnZXQoaW5zZXJ0KTtcbiAgaWYgKCF0YXJnZXQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZG4ndCBmaW5kIGEgc3R5bGUgdGFyZ2V0LiBUaGlzIHByb2JhYmx5IG1lYW5zIHRoYXQgdGhlIHZhbHVlIGZvciB0aGUgJ2luc2VydCcgcGFyYW1ldGVyIGlzIGludmFsaWQuXCIpO1xuICB9XG4gIHRhcmdldC5hcHBlbmRDaGlsZChzdHlsZSk7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGluc2VydEJ5U2VsZWN0b3I7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpIHtcbiAgdmFyIGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIik7XG4gIG9wdGlvbnMuc2V0QXR0cmlidXRlcyhlbGVtZW50LCBvcHRpb25zLmF0dHJpYnV0ZXMpO1xuICBvcHRpb25zLmluc2VydChlbGVtZW50LCBvcHRpb25zLm9wdGlvbnMpO1xuICByZXR1cm4gZWxlbWVudDtcbn1cbm1vZHVsZS5leHBvcnRzID0gaW5zZXJ0U3R5bGVFbGVtZW50OyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIHNldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcyhzdHlsZUVsZW1lbnQpIHtcbiAgdmFyIG5vbmNlID0gdHlwZW9mIF9fd2VicGFja19ub25jZV9fICE9PSBcInVuZGVmaW5lZFwiID8gX193ZWJwYWNrX25vbmNlX18gOiBudWxsO1xuICBpZiAobm9uY2UpIHtcbiAgICBzdHlsZUVsZW1lbnQuc2V0QXR0cmlidXRlKFwibm9uY2VcIiwgbm9uY2UpO1xuICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IHNldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlczsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBhcHBseShzdHlsZUVsZW1lbnQsIG9wdGlvbnMsIG9iaikge1xuICB2YXIgY3NzID0gXCJcIjtcbiAgaWYgKG9iai5zdXBwb3J0cykge1xuICAgIGNzcyArPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KG9iai5zdXBwb3J0cywgXCIpIHtcIik7XG4gIH1cbiAgaWYgKG9iai5tZWRpYSkge1xuICAgIGNzcyArPSBcIkBtZWRpYSBcIi5jb25jYXQob2JqLm1lZGlhLCBcIiB7XCIpO1xuICB9XG4gIHZhciBuZWVkTGF5ZXIgPSB0eXBlb2Ygb2JqLmxheWVyICE9PSBcInVuZGVmaW5lZFwiO1xuICBpZiAobmVlZExheWVyKSB7XG4gICAgY3NzICs9IFwiQGxheWVyXCIuY29uY2F0KG9iai5sYXllci5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KG9iai5sYXllcikgOiBcIlwiLCBcIiB7XCIpO1xuICB9XG4gIGNzcyArPSBvYmouY3NzO1xuICBpZiAobmVlZExheWVyKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG4gIGlmIChvYmoubWVkaWEpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cbiAgaWYgKG9iai5zdXBwb3J0cykge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuICB2YXIgc291cmNlTWFwID0gb2JqLnNvdXJjZU1hcDtcbiAgaWYgKHNvdXJjZU1hcCAmJiB0eXBlb2YgYnRvYSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIGNzcyArPSBcIlxcbi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsXCIuY29uY2F0KGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSksIFwiICovXCIpO1xuICB9XG5cbiAgLy8gRm9yIG9sZCBJRVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgICovXG4gIG9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0oY3NzLCBzdHlsZUVsZW1lbnQsIG9wdGlvbnMub3B0aW9ucyk7XG59XG5mdW5jdGlvbiByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGVFbGVtZW50KSB7XG4gIC8vIGlzdGFuYnVsIGlnbm9yZSBpZlxuICBpZiAoc3R5bGVFbGVtZW50LnBhcmVudE5vZGUgPT09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgc3R5bGVFbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50KTtcbn1cblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBkb21BUEkob3B0aW9ucykge1xuICBpZiAodHlwZW9mIGRvY3VtZW50ID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKCkge30sXG4gICAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHt9XG4gICAgfTtcbiAgfVxuICB2YXIgc3R5bGVFbGVtZW50ID0gb3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucyk7XG4gIHJldHVybiB7XG4gICAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUob2JqKSB7XG4gICAgICBhcHBseShzdHlsZUVsZW1lbnQsIG9wdGlvbnMsIG9iaik7XG4gICAgfSxcbiAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHtcbiAgICAgIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZUVsZW1lbnQpO1xuICAgIH1cbiAgfTtcbn1cbm1vZHVsZS5leHBvcnRzID0gZG9tQVBJOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIHN0eWxlVGFnVHJhbnNmb3JtKGNzcywgc3R5bGVFbGVtZW50KSB7XG4gIGlmIChzdHlsZUVsZW1lbnQuc3R5bGVTaGVldCkge1xuICAgIHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0LmNzc1RleHQgPSBjc3M7XG4gIH0gZWxzZSB7XG4gICAgd2hpbGUgKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKSB7XG4gICAgICBzdHlsZUVsZW1lbnQucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50LmZpcnN0Q2hpbGQpO1xuICAgIH1cbiAgICBzdHlsZUVsZW1lbnQuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKSk7XG4gIH1cbn1cbm1vZHVsZS5leHBvcnRzID0gc3R5bGVUYWdUcmFuc2Zvcm07IiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHRpZDogbW9kdWxlSWQsXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXShtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIi8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSAobW9kdWxlKSA9PiB7XG5cdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuXHRcdCgpID0+IChtb2R1bGVbJ2RlZmF1bHQnXSkgOlxuXHRcdCgpID0+IChtb2R1bGUpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCB7IGE6IGdldHRlciB9KTtcblx0cmV0dXJuIGdldHRlcjtcbn07IiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsIl9fd2VicGFja19yZXF1aXJlX18ubmMgPSB1bmRlZmluZWQ7IiwiaW1wb3J0IHsgZGlzcGxheVRhc2tzIH0gZnJvbSBcIi4vdGFza1wiXG5cbi8vIFRoaXMgZnVuY3Rpb24gY3JlYXRlcyB0aGUgcHJvamVjdCBpbnB1dCBET00uIFRoaXMgaXMgRE9NIFN0dWZmIG9ubHlcbmNvbnN0IHByb2plY3RJbnB1dERPTSA9IGZ1bmN0aW9uICgpIHtcbiAgICBjb25zdCBjb250ZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NvbnRlbnQnKVxuICAgIGNvbnN0IHByb2plY3RNb2RhbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpXG4gICAgcHJvamVjdE1vZGFsLnNldEF0dHJpYnV0ZSgnaWQnLCAncHJvamVjdE1vZGFsJylcbiAgICBwcm9qZWN0TW9kYWwuY2xhc3NMaXN0LmFkZCgncHJvamVjdE1vZGFsJylcbiAgICBwcm9qZWN0TW9kYWwuY2xhc3NMaXN0LmFkZCgnaGlkZGVuJylcbiAgICBjb250ZW50LmFwcGVuZENoaWxkKHByb2plY3RNb2RhbClcblxuICAgIGNvbnN0IG1vZGFsSGVhZGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JylcbiAgICBtb2RhbEhlYWRlci5zZXRBdHRyaWJ1dGUoJ2lkJywgJ21vZGFsSGVhZGVyJylcbiAgICBtb2RhbEhlYWRlci50ZXh0Q29udGVudCA9ICdBZGQgTmV3IFByb2plY3QnXG4gICAgcHJvamVjdE1vZGFsLmFwcGVuZENoaWxkKG1vZGFsSGVhZGVyKVxuXG4gICAgY29uc3QgbW9kYWxJbnB1dENvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpXG4gICAgbW9kYWxJbnB1dENvbnRhaW5lci5zZXRBdHRyaWJ1dGUoJ2lkJywgJ21vZGFsSW5wdXRDb250YWluZXInKVxuICAgIHByb2plY3RNb2RhbC5hcHBlbmRDaGlsZChtb2RhbElucHV0Q29udGFpbmVyKVxuXG4gICAgY29uc3QgcHJvamVjdFRpdGxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpO1xuICAgIHByb2plY3RUaXRsZS5uYW1lID0gXCJUaXRsZVwiO1xuICAgIHByb2plY3RUaXRsZS5zZXRBdHRyaWJ1dGUoJ2lkJywgJ3Byb2plY3RUaXRsZScpXG4gICAgY29uc3QgcHJvamVjdFRpdGxlTGFiZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiTGFiZWxcIik7XG4gICAgcHJvamVjdFRpdGxlTGFiZWwuc2V0QXR0cmlidXRlKFwiZm9yXCIsIHByb2plY3RUaXRsZSk7XG4gICAgcHJvamVjdFRpdGxlTGFiZWwuaW5uZXJIVE1MID0gXCJUaXRsZTogXCI7XG4gICAgbW9kYWxJbnB1dENvbnRhaW5lci5hcHBlbmRDaGlsZChwcm9qZWN0VGl0bGVMYWJlbCk7XG4gICAgbW9kYWxJbnB1dENvbnRhaW5lci5hcHBlbmRDaGlsZChwcm9qZWN0VGl0bGUpXG5cbiAgICBjb25zdCBjYW5jZWxCdG4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKVxuICAgIGNhbmNlbEJ0bi5zZXRBdHRyaWJ1dGUoJ2lkJywgJ2NhbmNlbEJ0bicpXG4gICAgY2FuY2VsQnRuLnRleHRDb250ZW50ID0gJ0NhbmNlbCdcbiAgICBtb2RhbElucHV0Q29udGFpbmVyLmFwcGVuZENoaWxkKGNhbmNlbEJ0bilcblxuICAgIGNvbnN0IGFkZEJ0biA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpXG4gICAgYWRkQnRuLnNldEF0dHJpYnV0ZSgnaWQnLCAnYWRkQnRuJylcbiAgICBhZGRCdG4udGV4dENvbnRlbnQgPSAnQWRkJ1xuICAgIGFkZEJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtzdG9yZVByb2plY3QoKSxwcm9qZWN0RGlzcGxheURvbSgpfSlcbiAgICBtb2RhbElucHV0Q29udGFpbmVyLmFwcGVuZENoaWxkKGFkZEJ0bilcbn1cblxuLy8gdGhpcyBmdW5jdGlvbiByZXZlYWxzIG9yIGhpZGVzIHRoZSBwcm9qZWN0IGlucHV0cyBieSBhZGRpbmcvcmVtb3ZpbmcgaGlkZGVuIGNsYXNzICoqKiBOQU1FIENIQU5HRURcbmNvbnN0IHByb2plY3RJbnB1dFJldmVhbCA9IGZ1bmN0aW9uICgpIHtcbiAgICBjb25zdCBwcm9qZWN0TW9kYWwgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncHJvamVjdE1vZGFsJylcbiAgICBjb25zdCBuZXdUYXNrQnRuID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ25ld1Rhc2tCdG4nKVxuICAgIGNvbnN0IG5ld1Byb2plY3RCdG4gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbmV3UHJvamVjdEJ0bicpXG4gICAgY29uc3QgY2FuY2VsQnRuID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NhbmNlbEJ0bicpXG5cblxuICAgIC8vIFdoZW4gdGhlIHVzZXIgY2xpY2tzIG9uIHRoZSBidXR0b24sIG9wZW4gdGhlIG1vZGFsXG4gICAgbmV3UHJvamVjdEJ0bi5vbmNsaWNrID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAvLyBwcm9qZWN0TW9kYWwuc3R5bGUuZGlzcGxheSA9IFwiYmxvY2tcIjtcbiAgICAgICAgcHJvamVjdE1vZGFsLmNsYXNzTGlzdC5yZW1vdmUoJ2hpZGRlbicpXG4gICAgICAgIG5ld1Rhc2tCdG4uY2xhc3NMaXN0LnJlbW92ZSgnaGlkZGVuJylcblxuICAgIH1cblxuICAgIC8vIFdoZW4gdGhlIHVzZXIgY2xpY2tzIG9uIDxzcGFuPiAoeCksIGNsb3NlIHRoZSBtb2RhbFxuICAgIGNhbmNlbEJ0bi5vbmNsaWNrID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAvLyBwcm9qZWN0TW9kYWwuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xuICAgICAgICBwcm9qZWN0TW9kYWwuY2xhc3NMaXN0LmFkZCgnaGlkZGVuJylcbiAgICB9XG5cbiAgICAvLyBXaGVuIHRoZSB1c2VyIGNsaWNrcyBhbnl3aGVyZSBvdXRzaWRlIG9mIHRoZSBtb2RhbCwgY2xvc2UgaXRcbiAgICB3aW5kb3cub25jbGljayA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICBpZiAoZXZlbnQudGFyZ2V0ID09IHByb2plY3RNb2RhbCkge1xuICAgICAgICAgICAgLy8gICBwcm9qZWN0TW9kYWwuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xuICAgICAgICAgICAgcHJvamVjdE1vZGFsLmNsYXNzTGlzdC5hZGQoJ2hpZGRlbicpXG4gICAgICAgIH1cbiAgICB9XG59XG5jb25zdCBjdXJyZW50UHJvamVjdCA9IHtcbiAgICBuYW1lOiAnJ1xufVxuXG5jb25zdCByZXR1cm5DdXJyZW50UHJvamVjdCA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gY3VycmVudFByb2plY3QubmFtZVxufVxuXG5jb25zdCBzdG9yZVByb2plY3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgbGV0IHByb2plY3RNb2RhbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwcm9qZWN0TW9kYWwnKVxuICAgIGxldCBwcm9qZWN0TmFtZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdwcm9qZWN0VGl0bGUnKVxuXG4gICAgaWYgKGV2ZW50LmN1cnJlbnRUYXJnZXQuZ2V0QXR0cmlidXRlKCdpZCcpID09ICdhZGRCdG4nKSB7XG5cbiAgICAgICAgaWYgKGxvY2FsU3RvcmFnZS5nZXRJdGVtKHByb2plY3ROYW1lLnZhbHVlKSAhPSBudWxsKSB7XG4gICAgICAgICAgICBhbGVydChcIlRoaXMgUHJvamVjdCBBbHJlYWR5IEV4aXN0cy4gQ2hvb3NlIGFub3RoZXIgbmFtZVwiKVxuICAgICAgICAgICAgLy8gbGV0IHByb2plY3ROYW1lID0gXCJcIlxuXG4gICAgICAgICAgICByZXR1cm5cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKHByb2plY3ROYW1lLnZhbHVlLCAnJylcbiAgICAgICAgICAgIGN1cnJlbnRQcm9qZWN0Lm5hbWUgPSBwcm9qZWN0TmFtZS52YWx1ZVxuICAgICAgICB9XG4gICAgfVxuICAgIHByb2plY3RNb2RhbC5jbGFzc0xpc3QuYWRkKCdoaWRkZW4nKVxuICAgIGlucHV0Q29udGFpbmVyLmNsYXNzTGlzdC5yZW1vdmUoJ2hpZGRlbicpXG5cbiAgICAvLyByZXR1cm4gYWN0aXZlUHJvamVjdFxufVxuXG5cbmNvbnN0IHByb2plY3REaXNwbGF5RG9tID0gKCkgPT4ge1xuICAgIGNvbnN0IHNpZGViYXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnc2lkZWJhcicpXG5cbiAgICB3aGlsZShzaWRlYmFyLmNoaWxkRWxlbWVudENvdW50PjEpe1xuICAgICAgICBzaWRlYmFyLnJlbW92ZUNoaWxkKHNpZGViYXIubGFzdENoaWxkKVxuICAgIH1cblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDw9IGxvY2FsU3RvcmFnZS5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCB0aXRsZSA9IGxvY2FsU3RvcmFnZS5rZXkoaSlcbiAgICAgICAgY29uc3QgYmFyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JylcbiAgICAgICAgY29uc3QgaW5wdXRDb250YWluZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnaW5wdXRDb250YWluZXInKVxuICAgICAgICBiYXIuc2V0QXR0cmlidXRlKCdpZCcsJ2JhcicpXG4gICAgICAgIGJhci50ZXh0Q29udGVudCA9IHRpdGxlXG4gICAgICAgIHNpZGViYXIuYXBwZW5kQ2hpbGQoYmFyKVxuICAgICAgICBiYXIuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCgpPT4ge1xuICAgICAgICAgICAgY3VycmVudFByb2plY3QubmFtZSA9IGV2ZW50LnRhcmdldC50ZXh0Q29udGVudCxcbiAgICAgICAgICAgIGRpc3BsYXlUYXNrcygpXG4gICAgICAgICAgICBpbnB1dENvbnRhaW5lci5jbGFzc0xpc3QucmVtb3ZlKCdoaWRkZW4nKVxuICAgICAgICB9KVxuICAgIC8vIH1cbn1cbn1cblxuZXhwb3J0IHtcbiAgICBwcm9qZWN0SW5wdXRET00sXG4gICAgcHJvamVjdElucHV0UmV2ZWFsLFxuICAgIHN0b3JlUHJvamVjdCxcbiAgICByZXR1cm5DdXJyZW50UHJvamVjdCxcbiAgICBwcm9qZWN0RGlzcGxheURvbVxufSIsImltcG9ydCB7IHJldHVybkN1cnJlbnRQcm9qZWN0IH0gZnJvbSBcIi4vcHJvamVjdC5qc1wiXG5cbi8vIGNvbnN0cnVjdG9yIGZvciBuZXcgdG9kb1xuZnVuY3Rpb24gVG9kbyh0aXRsZSwgZGVzY3JpcHRpb24sIGR1ZURhdGUsIHByaW9yaXR5LCBub3Rlcykge1xuICAgIHRoaXMudGl0bGUgPSB0aXRsZTtcbiAgICB0aGlzLmRlc2NyaXB0aW9uID0gZGVzY3JpcHRpb247XG4gICAgdGhpcy5kdWVEYXRlID0gZHVlRGF0ZTtcbiAgICB0aGlzLnByaW9yaXR5ID0gcHJpb3JpdHk7XG4gICAgdGhpcy5ub3RlcyA9IG5vdGVzO1xufVxuXG4vLyByZWFkcyBpbnB1dHMgYW5kIHJldHVybnMgbmV3IHRvZG8gdXNpbmcgdGhlIGNvbnN0cnVjdG9yIGFib3ZlXG5jb25zdCBjb2xsZWN0SW5wdXRzID0gZnVuY3Rpb24gKCkge1xuICAgIGNvbnN0IHRpdGxlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3RpdGxlJykudmFsdWVcbiAgICBjb25zdCBkZXNjID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2Rlc2MnKS52YWx1ZVxuICAgIGNvbnN0IGR1ZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdkdWUnKS52YWx1ZVxuICAgIGNvbnN0IHByaW9yaXR5ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3ByaW9yaXR5JykudmFsdWVcbiAgICBjb25zdCBub3RlcyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdub3RlcycpLnZhbHVlXG5cbiAgICByZXR1cm4gbmV3IFRvZG8odGl0bGUsIGRlc2MsIGR1ZSwgcHJpb3JpdHksIG5vdGVzKVxufVxuXG4vLyB0aGlzIGlzIGEgdGVzdCBmdW5jdGlvbiB0byBnaXZlIHRoZSBpbnB1dHMgdmFsdWVzIGFuZCBzZWUgaWYgdGhleSBhcmUgcmVhZCBjb3JyZWN0bHkgYnkgb3RoZXIgZnVuY3Rpb25zXG5jb25zdCB0ZXN0SW5wdXRWYWx1ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBjb25zdCBpbnB1dENvbnRhaW5lciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdpbnB1dENvbnRhaW5lcicpXG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGlucHV0Q29udGFpbmVyLmNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChpICUgMiA9PSAwKSB7XG4gICAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9XG4gICAgICAgIGlmIChpID09IDUpIHtcbiAgICAgICAgICAgIGlucHV0Q29udGFpbmVyLmNoaWxkcmVuW2ldLnZhbHVlID0gXCIyMDAxLTAxLTAxXCJcbiAgICAgICAgfVxuICAgICAgICBpZiAoaSA9PSA3KSB7XG4gICAgICAgICAgICBpbnB1dENvbnRhaW5lci5jaGlsZHJlbltpXS52YWx1ZSA9IFwiSGlnaFwiXG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpbnB1dENvbnRhaW5lci5jaGlsZHJlbltpXS52YWx1ZSA9ICd0ZXN0IFZhbHVlJ1xuICAgICAgICB9XG5cbiAgICB9XG59XG5cbi8vIHRoaXMgY3JlYXRlcyB0aGUgdGFzayBpbnB1dCBkb21zXG5jb25zdCB0YXNrSW5wdXRzID0gKCkgPT4ge1xuICAgIGNvbnN0IHRhc2tEaXNwbGF5ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Rhc2tEaXNwbGF5JylcblxuXG4gICAgY29uc3QgaW5wdXRDb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKVxuICAgIGlucHV0Q29udGFpbmVyLnNldEF0dHJpYnV0ZSgnaWQnLCAnaW5wdXRDb250YWluZXInKVxuICAgIGlucHV0Q29udGFpbmVyLmNsYXNzTGlzdC5hZGQoJ2hpZGRlbicpXG5cbiAgICBjb25zdCB0aXRsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKTtcbiAgICB0aXRsZS5uYW1lID0gXCJUaXRsZVwiO1xuICAgIHRpdGxlLnNldEF0dHJpYnV0ZSgnaWQnLCAndGl0bGUnKVxuICAgIGNvbnN0IHRpdGxlbGFiZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiTGFiZWxcIik7XG4gICAgdGl0bGVsYWJlbC5zZXRBdHRyaWJ1dGUoXCJmb3JcIiwgdGl0bGUpO1xuICAgIHRpdGxlbGFiZWwuaW5uZXJIVE1MID0gXCJUaXRsZTogXCI7XG4gICAgaW5wdXRDb250YWluZXIuYXBwZW5kQ2hpbGQodGl0bGVsYWJlbCk7XG4gICAgaW5wdXRDb250YWluZXIuYXBwZW5kQ2hpbGQodGl0bGUpXG5cbiAgICBjb25zdCBkZXNjID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInRleHRhcmVhXCIpO1xuICAgIGRlc2MubmFtZSA9IFwiRGVzY3JpcHRpb25cIlxuICAgIGRlc2Muc2V0QXR0cmlidXRlKCdpZCcsICdkZXNjJylcbiAgICBjb25zdCBkZXNjbGFiZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiTGFiZWxcIik7XG4gICAgZGVzY2xhYmVsLnNldEF0dHJpYnV0ZShcImZvclwiLCBkZXNjKTtcbiAgICBkZXNjbGFiZWwuaW5uZXJIVE1MID0gXCJEZXNjcmlwdGlvbjogXCI7XG4gICAgaW5wdXRDb250YWluZXIuYXBwZW5kQ2hpbGQoZGVzY2xhYmVsKTtcbiAgICBpbnB1dENvbnRhaW5lci5hcHBlbmRDaGlsZChkZXNjKVxuXG4gICAgY29uc3QgZHVlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpO1xuICAgIGR1ZS50eXBlID0gJ2RhdGUnXG4gICAgZHVlLm5hbWUgPSBcIkR1ZVwiXG4gICAgZHVlLnNldEF0dHJpYnV0ZSgnaWQnLCAnZHVlJylcbiAgICBjb25zdCBkdWVsYWJlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJMYWJlbFwiKTtcbiAgICBkdWVsYWJlbC5zZXRBdHRyaWJ1dGUoXCJmb3JcIiwgZHVlKTtcbiAgICBkdWVsYWJlbC5pbm5lckhUTUwgPSBcIkR1ZSBEYXRlOiBcIjtcbiAgICBpbnB1dENvbnRhaW5lci5hcHBlbmRDaGlsZChkdWVsYWJlbCk7XG4gICAgaW5wdXRDb250YWluZXIuYXBwZW5kQ2hpbGQoZHVlKVxuXG4gICAgY29uc3QgcHJpb3JpdHkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic2VsZWN0XCIpO1xuICAgIHByaW9yaXR5Lm5hbWUgPSBcIlByaW9yaXR5XCJcbiAgICBwcmlvcml0eS5zZXRBdHRyaWJ1dGUoJ2lkJywgJ3ByaW9yaXR5JylcbiAgICBsZXQgdmFsdWVzID0gWydMb3cnLCAnTWVkaXVtJywgJ0hpZ2gnLCAnVWdlbnQnXVxuICAgIGZvciAoY29uc3QgdmFsIG9mIHZhbHVlcykge1xuICAgICAgICB2YXIgb3B0aW9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcIm9wdGlvblwiKTtcbiAgICAgICAgb3B0aW9uLnZhbHVlID0gdmFsO1xuICAgICAgICBvcHRpb24udGV4dCA9IHZhbC5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHZhbC5zbGljZSgxKTtcbiAgICAgICAgcHJpb3JpdHkuYXBwZW5kQ2hpbGQob3B0aW9uKTtcbiAgICB9XG4gICAgY29uc3QgcHJpb3JpdHlsYWJlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJMYWJlbFwiKTtcbiAgICBwcmlvcml0eWxhYmVsLnNldEF0dHJpYnV0ZShcImZvclwiLCBwcmlvcml0eSk7XG4gICAgcHJpb3JpdHlsYWJlbC5pbm5lckhUTUwgPSBcIlByaW9yaXR5OiBcIjtcbiAgICBpbnB1dENvbnRhaW5lci5hcHBlbmRDaGlsZChwcmlvcml0eWxhYmVsKTtcbiAgICBpbnB1dENvbnRhaW5lci5hcHBlbmRDaGlsZChwcmlvcml0eSlcblxuICAgIGNvbnN0IG5vdGVzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInRleHRhcmVhXCIpO1xuXG4gICAgbm90ZXMubmFtZSA9IFwiTm90ZXNcIlxuICAgIG5vdGVzLnNldEF0dHJpYnV0ZSgnaWQnLCAnbm90ZXMnKVxuICAgIGNvbnN0IG5vdGVzbGFiZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiTGFiZWxcIik7XG4gICAgbm90ZXNsYWJlbC5zZXRBdHRyaWJ1dGUoXCJmb3JcIiwgcHJpb3JpdHkpO1xuICAgIG5vdGVzbGFiZWwuaW5uZXJIVE1MID0gXCJOb3RlczogXCI7XG4gICAgaW5wdXRDb250YWluZXIuYXBwZW5kQ2hpbGQobm90ZXNsYWJlbCk7XG4gICAgaW5wdXRDb250YWluZXIuYXBwZW5kQ2hpbGQobm90ZXMpXG5cbiAgICBjb25zdCBzdWJtaXRCdG4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKVxuICAgIHN1Ym1pdEJ0bi50ZXh0Q29udGVudCA9IFwiQWRkIFRvLURvXCJcbiAgICBzdWJtaXRCdG4uc2V0QXR0cmlidXRlKCdpZCcsICdwcmludEJ0bicpXG4gICAgaW5wdXRDb250YWluZXIuYXBwZW5kQ2hpbGQoc3VibWl0QnRuKVxuICAgIHN1Ym1pdEJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHt0YXNrU3RvcmFnZShjb2xsZWN0SW5wdXRzKCkpLGNsZWFyVGFza0lucHV0KCl9KVxuXG5cbiAgICB0YXNrRGlzcGxheS5hcHBlbmRDaGlsZChpbnB1dENvbnRhaW5lcilcbiAgICB0ZXN0SW5wdXRWYWx1ZSgpXG59XG5cbmZ1bmN0aW9uIHRhc2tTdG9yYWdlKHgpIHtcbiAgICBsZXQgY3VycmVudFByb2plY3QgPSByZXR1cm5DdXJyZW50UHJvamVjdCgpXG4gICAgaWYgKGxvY2FsU3RvcmFnZS5nZXRJdGVtKHgudGl0bGUpICE9IG51bGwpIHtcbiAgICAgICAgYWxlcnQoXCJUaGlzIFRhc2sgQWxyZWFkeSBFeGlzdHMuIENob29zZSBhbm90aGVyIG5hbWVcIilcbiAgICAgICAgcmV0dXJuXG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBpZiAobG9jYWxTdG9yYWdlLmdldEl0ZW0oY3VycmVudFByb2plY3QpPT0nJyl7XG4gICAgICAgICAgICBsZXQgbmV3VGFza1RpdGxlID0geC50aXRsZVxuICAgICAgICAgICAgbGV0IG5ld1Rhc2sgPSB7W25ld1Rhc2tUaXRsZV06eH1cbiAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKGN1cnJlbnRQcm9qZWN0LEpTT04uc3RyaW5naWZ5KG5ld1Rhc2spKVxuICAgICAgICAgICAgY29uc29sZS5sb2cobG9jYWxTdG9yYWdlKVxuICAgICAgICB9XG4gICAgICAgIGVsc2V7XG4gICAgICAgICAgICBsZXQgYWxsVGFza3MgPSBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKGN1cnJlbnRQcm9qZWN0KSlcbiAgICAgICAgICAgIGxldCBuZXdUYXNrVGl0bGUgPSB4LnRpdGxlXG4gICAgICAgICAgICBsZXQgbmV3VGFzayA9IHtbbmV3VGFza1RpdGxlXTp4fVxuICAgICAgICAgICAgYWxsVGFza3MgPSBPYmplY3QuYXNzaWduKGFsbFRhc2tzLG5ld1Rhc2spXG4gICAgICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShjdXJyZW50UHJvamVjdCxKU09OLnN0cmluZ2lmeShhbGxUYXNrcykpXG4gICAgICAgIH1cbiAgICB9XG5cbn1cblxuY29uc3QgY2xlYXJUYXNrSW5wdXQgPSBmdW5jdGlvbigpe1xuICAgIGNvbnN0IGlucHV0Q29udGFpbmVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2lucHV0Q29udGFpbmVyJylcbiAgICBmb3IobGV0IGkgPSAwOyBpPGlucHV0Q29udGFpbmVyLmNoaWxkRWxlbWVudENvdW50OyBpKyspe1xuICAgICAgICBpZihpbnB1dENvbnRhaW5lci5jaGlsZHJlbltpXS5ub2RlTmFtZSE9PVwiTEFCRUxcIil7XG4gICAgICAgICAgICBpbnB1dENvbnRhaW5lci5jaGlsZHJlbltpXS52YWx1ZT0nJ1xuICAgICAgICB9XG4gICAgfVxuICAgIGlucHV0Q29udGFpbmVyLmNsYXNzTGlzdC5hZGQoJ2hpZGRlbicpXG59XG5cbmNvbnN0IGRpc3BsYXlUYXNrcyA9IGZ1bmN0aW9uICgpe1xuICAgIGNvbnN0IHRhc2tEaXNwbGF5ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3Rhc2tEaXNwbGF5JylcbiAgICBjb25zdCBjdXJyZW50UHJvamVjdCA9IHJldHVybkN1cnJlbnRQcm9qZWN0KClcblxuICAgIHdoaWxlICh0YXNrRGlzcGxheS5jaGlsZEVsZW1lbnRDb3VudD4xKXtcbiAgICAgICAgdGFza0Rpc3BsYXkucmVtb3ZlQ2hpbGQodGFza0Rpc3BsYXkubGFzdENoaWxkKVxuICAgIH1cbiAgICBsZXQgY3VycmVudFByb2plY3RUYXNrcyA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKGN1cnJlbnRQcm9qZWN0KVxuICAgIGlmIChjdXJyZW50UHJvamVjdFRhc2tzIT09Jycpe1xuICAgICAgICBjdXJyZW50UHJvamVjdFRhc2tzID0gSlNPTi5wYXJzZShjdXJyZW50UHJvamVjdFRhc2tzKVxuICAgIH1cbmlmKGN1cnJlbnRQcm9qZWN0IT09XCJcIil7XG4gICAgLy8gbGV0IGtleXMgPSBbXTtcbiAgICAvLyBmb3IgKGNvbnN0IGl0ZW0gaW4gT2JqZWN0LmtleXMoY3VycmVudFByb2plY3RUYXNrcykpe1xuICAgIC8vICAgICBrZXlzLnB1c2goaXRlbSlcbiAgICAvLyB9XG5cbiAgICBmb3IobGV0IGk9MDsgaTxPYmplY3Qua2V5cyhjdXJyZW50UHJvamVjdFRhc2tzKS5sZW5ndGg7IGkrKyl7XG4gICAgY29uc29sZS5sb2coY3VycmVudFByb2plY3RUYXNrcylcbiAgICBjb25zdCBjYXJkID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JylcbiAgICBjYXJkLnNldEF0dHJpYnV0ZSgnaWQnLCdjYXJkJylcbiAgICB0YXNrRGlzcGxheS5hcHBlbmRDaGlsZChjYXJkKVxuXG4gICAgY29uc3QgY2FyZFRpdGxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JylcbiAgICBjYXJkVGl0bGUuc2V0QXR0cmlidXRlKCdpZCcsJ2NhcmRUaXRsZScpXG4gICAgY2FyZFRpdGxlLnRleHRDb250ZW50ID0gT2JqZWN0LnZhbHVlcyhjdXJyZW50UHJvamVjdFRhc2tzKVtpXS50aXRsZVxuICAgIGNhcmQuYXBwZW5kQ2hpbGQoY2FyZFRpdGxlKVxuXG4gICAgY29uc3QgY2FyZERlc2MgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKVxuICAgIGNhcmREZXNjLnNldEF0dHJpYnV0ZSgnaWQnLCdjYXJkRGVzYycpXG4gICAgY2FyZERlc2MudGV4dENvbnRlbnQgPSBPYmplY3QudmFsdWVzKGN1cnJlbnRQcm9qZWN0VGFza3MpW2ldLmRlc2NyaXB0aW9uXG4gICAgY2FyZC5hcHBlbmRDaGlsZChjYXJkRGVzYylcblxuICAgIGNvbnN0IGNhcmREdWUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKVxuICAgIGNhcmREdWUuc2V0QXR0cmlidXRlKCdpZCcsJ2NhcmREdWUnKVxuICAgIGNhcmREdWUudGV4dENvbnRlbnQgPSBPYmplY3QudmFsdWVzKGN1cnJlbnRQcm9qZWN0VGFza3MpW2ldLmRhdGVcbiAgICBjYXJkLmFwcGVuZENoaWxkKGNhcmREdWUpXG5cbiAgICBjb25zdCBjYXJkUHJpb3JpdHkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKVxuICAgIGNhcmRQcmlvcml0eS5zZXRBdHRyaWJ1dGUoJ2lkJywnY2FyZFByaW9yaXR5JylcbiAgICBjYXJkUHJpb3JpdHkudGV4dENvbnRlbnQgPSBPYmplY3QudmFsdWVzKGN1cnJlbnRQcm9qZWN0VGFza3MpW2ldLnByaW9yaXR5XG4gICAgY2FyZC5hcHBlbmRDaGlsZChjYXJkUHJpb3JpdHkpXG5cbiAgICBjb25zdCBjYXJkTm90ZXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKVxuICAgIGNhcmROb3Rlcy5zZXRBdHRyaWJ1dGUoJ2lkJywnY2FyZE5vdGVzJylcbiAgICBjYXJkTm90ZXMudGV4dENvbnRlbnQgPSBPYmplY3QudmFsdWVzKGN1cnJlbnRQcm9qZWN0VGFza3MpW2ldLm5vdGVzXG4gICAgY2FyZC5hcHBlbmRDaGlsZChjYXJkTm90ZXMpXG4gICAgfVxufVxufVxuZXhwb3J0IHt0YXNrSW5wdXRzLCBkaXNwbGF5VGFza3N9XG4iLCJcbiAgICAgIGltcG9ydCBBUEkgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanNcIjtcbiAgICAgIGltcG9ydCBkb21BUEkgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qc1wiO1xuICAgICAgaW1wb3J0IHNldEF0dHJpYnV0ZXMgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRTdHlsZUVsZW1lbnQgZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanNcIjtcbiAgICAgIGltcG9ydCBjb250ZW50LCAqIGFzIG5hbWVkRXhwb3J0IGZyb20gXCIhIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3R5bGUuY3NzXCI7XG4gICAgICBcbiAgICAgIFxuXG52YXIgb3B0aW9ucyA9IHt9O1xuXG5vcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtID0gc3R5bGVUYWdUcmFuc2Zvcm1Gbjtcbm9wdGlvbnMuc2V0QXR0cmlidXRlcyA9IHNldEF0dHJpYnV0ZXM7XG5cbiAgICAgIG9wdGlvbnMuaW5zZXJ0ID0gaW5zZXJ0Rm4uYmluZChudWxsLCBcImhlYWRcIik7XG4gICAgXG5vcHRpb25zLmRvbUFQSSA9IGRvbUFQSTtcbm9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50ID0gaW5zZXJ0U3R5bGVFbGVtZW50O1xuXG52YXIgdXBkYXRlID0gQVBJKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0ICogZnJvbSBcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zdHlsZS5jc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJpbXBvcnQge3Rhc2tJbnB1dHMsIGRpc3BsYXlUYXNrc30gZnJvbSBcIi4vdGFzay5qc1wiXG5pbXBvcnQge3Byb2plY3RJbnB1dERPTSwgcHJvamVjdElucHV0UmV2ZWFsLCBwcm9qZWN0RGlzcGxheURvbX0gZnJvbSBcIi4vcHJvamVjdC5qc1wiXG5cbi8vIGltcG9ydCB0YXNrSW5wdXRzIGZyb20gXCIuL3Rhc2tJbnB1dHNcIlxuLy8gaW1wb3J0IHByb2plY3RJbnB1dCBmcm9tIFwiLi9wcm9qZWN0SW5wdXRcIlxuLy8gaW1wb3J0IG5ld1Byb2plY3QgZnJvbSBcIi4vbmV3UHJvamVjdFwiXG5cbmNvbnN0IHBhZ2VMb2FkID0gZnVuY3Rpb24oKXtcbiAgICBcbiAgICBjb25zdCBjb250ZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NvbnRlbnQnKVxuXG4gICAgY29uc3QgaGVhZGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JylcbiAgICBoZWFkZXIudGV4dENvbnRlbnQgPSAnVGhpcyBpcyBteSBoZWFkZXInXG4gICAgaGVhZGVyLnNldEF0dHJpYnV0ZSgnaWQnLCAnaGVhZGVyJylcbiAgICBjb250ZW50LmFwcGVuZENoaWxkKGhlYWRlcilcbiAgICBoZWFkZXIuY2xhc3NMaXN0LmFkZCgnY29udGFpbmVyJylcblxuICAgIGNvbnN0IHRhc2tDb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKVxuICAgIHRhc2tDb250YWluZXIuc2V0QXR0cmlidXRlKCdpZCcsICd0YXNrQ29udGFpbmVyJylcbiAgICAvLyB0YXNrQ29udGFpbmVyLnRleHRDb250ZW50ID0gJ1RoaXMgaXMgbXkgdGFzayBjb250YWluZXInXG4gICAgdGFza0NvbnRhaW5lci5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSAnZ3JleSdcbiAgICBjb250ZW50LmFwcGVuZENoaWxkKHRhc2tDb250YWluZXIpXG5cbiAgICBjb25zdCBzaWRlYmFyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JylcbiAgICBzaWRlYmFyLnNldEF0dHJpYnV0ZSgnaWQnLCAnc2lkZWJhcicpXG4gICAgc2lkZWJhci50ZXh0Q29udGVudCA9ICdUaGlzIGlzIG15IHNpZGViYXInXG4gICAgdGFza0NvbnRhaW5lci5hcHBlbmRDaGlsZChzaWRlYmFyKVxuXG4gICAgY29uc3QgcHJvamVjdE1lbnUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKVxuICAgIHByb2plY3RNZW51LnNldEF0dHJpYnV0ZSgnaWQnLCdwcm9qZWN0TWVudScpXG4gICAgc2lkZWJhci5hcHBlbmRDaGlsZChwcm9qZWN0TWVudSlcblxuICAgIGNvbnN0IG5ld1Byb2plY3RCdG4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKVxuICAgIG5ld1Byb2plY3RCdG4udGV4dENvbnRlbnQgPSBcIkFkZCBOZXcgUHJvamVjdFwiXG4gICAgbmV3UHJvamVjdEJ0bi5zZXRBdHRyaWJ1dGUoJ2lkJywnbmV3UHJvamVjdEJ0bicpXG4gICAgcHJvamVjdE1lbnUuYXBwZW5kQ2hpbGQobmV3UHJvamVjdEJ0bilcblxuICAgIGNvbnN0IG5ld1Rhc2tCdG4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKVxuICAgIG5ld1Rhc2tCdG4udGV4dENvbnRlbnQgPSBcIkFkZCBOZXcgVGFza1wiXG4gICAgbmV3VGFza0J0bi5zZXRBdHRyaWJ1dGUoJ2lkJywnbmV3VGFza0J0bicpXG4gICAgcHJvamVjdE1lbnUuYXBwZW5kQ2hpbGQobmV3VGFza0J0bilcbiAgICBuZXdUYXNrQnRuLmNsYXNzTGlzdC5hZGQoJ2hpZGRlbicpXG4gICAgbmV3VGFza0J0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsKCk9PntcbiAgICAgICAgY29uc3QgaW5wdXRDb250YWluZXI9ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2lucHV0Q29udGFpbmVyJylcbiAgICAgICAgaW5wdXRDb250YWluZXIuY2xhc3NMaXN0LnJlbW92ZSgnaGlkZGVuJylcbiAgICB9KVxuXG5cbiAgICBjb25zdCB0YXNrRGlzcGxheSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpXG4gICAgdGFza0Rpc3BsYXkuc2V0QXR0cmlidXRlKCdpZCcsICd0YXNrRGlzcGxheScpXG4gICAgdGFza0Rpc3BsYXkudGV4dENvbnRlbnQgPSAnVGhpcyBpcyBteSB0YXNrIGRpc3BsYXknXG4gICAgdGFza0NvbnRhaW5lci5hcHBlbmRDaGlsZCh0YXNrRGlzcGxheSlcblxuICAgIGNvbnN0IGNsZWFyQnRuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJylcbiAgICBjbGVhckJ0bi50ZXh0Q29udGVudCA9ICdDTEVBUidcbiAgICBjbGVhckJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsKCk9PmxvY2FsU3RvcmFnZS5jbGVhcigpKVxuXG4gICAgY29uc3QgcHAgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKVxuICAgIHBwLnRleHRDb250ZW50PSdwcHAnXG5cblxuICAgIGNvbnN0IHRlc3RCdG5zID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JylcbiAgICBjb250ZW50LmFwcGVuZENoaWxkKHRlc3RCdG5zKVxuICAgIHRlc3RCdG5zLmFwcGVuZENoaWxkKGNsZWFyQnRuKVxuICAgIHRlc3RCdG5zLmFwcGVuZENoaWxkKHBwKVxuXG4gICAgLy8gVGhpcyBpcyBET00gU3R1ZmYgb25seVxuLy8gY29uc3QgcHJvamVjdElucHV0RE9NID0gZnVuY3Rpb24oKXtcbi8vICAgICBjb25zdCBjb250ZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NvbnRlbnQnKVxuLy8gICAgIGNvbnN0IHByb2plY3RNb2RhbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpXG4vLyAgICAgcHJvamVjdE1vZGFsLnNldEF0dHJpYnV0ZSgnaWQnLCdwcm9qZWN0TW9kYWwnKVxuLy8gICAgIHByb2plY3RNb2RhbC5jbGFzc0xpc3QuYWRkKCdwcm9qZWN0TW9kYWwnKVxuLy8gICAgIHByb2plY3RNb2RhbC5jbGFzc0xpc3QuYWRkKCdoaWRkZW4nKVxuLy8gICAgIGNvbnRlbnQuYXBwZW5kQ2hpbGQocHJvamVjdE1vZGFsKVxuXG4vLyAgICAgY29uc3QgbW9kYWxIZWFkZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKVxuLy8gICAgIG1vZGFsSGVhZGVyLnNldEF0dHJpYnV0ZSgnaWQnLCdtb2RhbEhlYWRlcicpXG4vLyAgICAgbW9kYWxIZWFkZXIudGV4dENvbnRlbnQgPSAnQWRkIE5ldyBQcm9qZWN0J1xuLy8gICAgIHByb2plY3RNb2RhbC5hcHBlbmRDaGlsZChtb2RhbEhlYWRlcilcblxuLy8gICAgIGNvbnN0IG1vZGFsSW5wdXRDb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKVxuLy8gICAgIG1vZGFsSW5wdXRDb250YWluZXIuc2V0QXR0cmlidXRlKCdpZCcsJ21vZGFsSW5wdXRDb250YWluZXInKVxuLy8gICAgIHByb2plY3RNb2RhbC5hcHBlbmRDaGlsZChtb2RhbElucHV0Q29udGFpbmVyKVxuXG4vLyAgICAgY29uc3QgcHJvamVjdFRpdGxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpO1xuLy8gICAgIHByb2plY3RUaXRsZS5uYW1lID0gXCJUaXRsZVwiO1xuLy8gICAgIHByb2plY3RUaXRsZS5zZXRBdHRyaWJ1dGUoJ2lkJywgJ3Byb2plY3RUaXRsZScpXG4vLyAgICAgY29uc3QgcHJvamVjdFRpdGxlTGFiZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiTGFiZWxcIik7XG4vLyAgICAgcHJvamVjdFRpdGxlTGFiZWwuc2V0QXR0cmlidXRlKFwiZm9yXCIsIHByb2plY3RUaXRsZSk7XG4vLyAgICAgcHJvamVjdFRpdGxlTGFiZWwuaW5uZXJIVE1MID0gXCJUaXRsZTogXCI7XG4vLyAgICAgbW9kYWxJbnB1dENvbnRhaW5lci5hcHBlbmRDaGlsZChwcm9qZWN0VGl0bGVMYWJlbCk7XG4vLyAgICAgbW9kYWxJbnB1dENvbnRhaW5lci5hcHBlbmRDaGlsZChwcm9qZWN0VGl0bGUpXG5cbi8vICAgICBjb25zdCBjYW5jZWxCdG4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKVxuLy8gICAgIGNhbmNlbEJ0bi5zZXRBdHRyaWJ1dGUoJ2lkJywnY2FuY2VsQnRuJylcbi8vICAgICBjYW5jZWxCdG4udGV4dENvbnRlbnQgPSAnQ2FuY2VsJ1xuLy8gICAgIG1vZGFsSW5wdXRDb250YWluZXIuYXBwZW5kQ2hpbGQoY2FuY2VsQnRuKVxuXG4vLyAgICAgY29uc3QgYWRkQnRuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJylcbi8vICAgICBhZGRCdG4uc2V0QXR0cmlidXRlKCdpZCcsJ2FkZEJ0bicpXG4vLyAgICAgYWRkQnRuLnRleHRDb250ZW50ID0gJ0FkZCdcbi8vICAgICBhZGRCdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCgpPT5uZXdQcm9qZWN0KCkpXG4vLyAgICAgbW9kYWxJbnB1dENvbnRhaW5lci5hcHBlbmRDaGlsZChhZGRCdG4pXG4vLyB9XG5cbnRhc2tJbnB1dHMoKVxucHJvamVjdERpc3BsYXlEb20oKVxucHJvamVjdElucHV0RE9NKClcbnByb2plY3RJbnB1dFJldmVhbCgpXG5kaXNwbGF5VGFza3MoKVxuXG59XG5cbmV4cG9ydCBkZWZhdWx0IHBhZ2VMb2FkXG4iLCJpbXBvcnQgcGFnZUxvYWQgZnJvbSBcIi4vcGFnZUxvYWRcIlxuaW1wb3J0ICcuL3N0eWxlLmNzcyc7XG5pbXBvcnQgY29sbGVjdElucHV0cyBmcm9tIFwiLi9uZXdUb0RvXCJcbmltcG9ydCB0YXNrU3RvcmFnZSBmcm9tIFwiLi9zdG9yYWdlLmpzXCJcbmltcG9ydCB0YXNrSW5wdXRzIGZyb20gXCIuL3Rhc2tJbnB1dHNcIlxuXG4vLyBpbXBvcnQgcmVhZEFuZFN0b3JlIGZyb20gXCIuL3N0b3JhZ2VcIlxuXG4vLyBjb25zdCBjb250ZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NvbnRlbnQnKVxuLy8gY29uc3QgYnRuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJylcbi8vIGJ0bi50ZXh0Q29udGVudCA9ICdidXR0b24nXG4vLyBjb250ZW50LmFwcGVuZENoaWxkKGJ0bilcblxuLy8gYnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJyxmdW5jdGlvbigpe1xuLy8gICAgIHRhc2tTdG9yYWdlKGNvbGxlY3RJbnB1dHMoKSlcbi8vIH0pXG5cblxuLy8gLy8gY3JlYXRlcyB0aGUgZG9tIGlucHV0cyAtIGFsbCBET00gcmVsYXRlZCBubyBsb2dpY1xuLy8gdGFza0lucHV0cygpXG5wYWdlTG9hZCgpXG5cbi8vIHRlc3QgYWRkIHRvIGxvY2FsIHN0b3JhZ2VcblxuY29uc3QgZGVmYXVsdFRhc2tzID0gZnVuY3Rpb24gKCkge1xuICAgIGNvbnN0IGhvdXNld29yayA9IHtcbiAgICAgICAgd2FzaGluZzoge1xuICAgICAgICAgICAgdGl0bGU6ICd3YXNoIGRpc2hlcycsXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogJ3dhc2ggdGhlIGRpc2hlcycsXG4gICAgICAgICAgICBkYXRlOiAnMjAyMy0wMS0wMScsXG4gICAgICAgICAgICBwcmlvcml0eTogJ2hpZ2gnLFxuICAgICAgICAgICAgbm90ZXM6ICd0aGVyZSBhcmUgbm8gbm90ZXMnXG4gICAgICAgIH0sXG4gICAgICAgIGNvb2tpbmc6IHtcbiAgICAgICAgICAgIHRpdGxlOiAnY29vayBkaW5uZXInLFxuICAgICAgICAgICAgZGVzY3JpcHRpb246ICdjb29rIHRoZSBkaW5uZXInLFxuICAgICAgICAgICAgZGF0ZTogJzIwMjMtMDItMDEnLFxuICAgICAgICAgICAgcHJpb3JpdHk6ICdsb3cnLFxuICAgICAgICAgICAgbm90ZXM6ICd0aGVyZSBhcmUgc29tZSBub3RlcydcbiAgICAgICAgfSxcbiAgICAgICAgeWFyZDoge1xuICAgICAgICAgICAgdGl0bGU6ICdjdXQgZ3Jhc3MnLFxuICAgICAgICAgICAgZGVzY3JpcHRpb246ICdjdXQgdGhlIGdyYXNzJyxcbiAgICAgICAgICAgIGRhdGU6ICcyMDIzLTAyLTAxJyxcbiAgICAgICAgICAgIHByaW9yaXR5OiAnbWVkJyxcbiAgICAgICAgICAgIG5vdGVzOiAndGhlcmUgYXJlIHNvIG1hbnkgbm90ZXMgbm90ZXMnXG4gICAgICAgIH0sXG4gICAgfVxuICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdob3VzZXdvcmsnLCBKU09OLnN0cmluZ2lmeShob3VzZXdvcmspKVxufVxuXG5kZWZhdWx0VGFza3MoKVxuXG5cblxuXG5cblxuIl0sIm5hbWVzIjpbIl9fX0NTU19MT0FERVJfRVhQT1JUX19fIiwicHVzaCIsIm1vZHVsZSIsImlkIiwiZXhwb3J0cyIsImNzc1dpdGhNYXBwaW5nVG9TdHJpbmciLCJsaXN0IiwidG9TdHJpbmciLCJ0aGlzIiwibWFwIiwiaXRlbSIsImNvbnRlbnQiLCJuZWVkTGF5ZXIiLCJjb25jYXQiLCJsZW5ndGgiLCJqb2luIiwiaSIsIm1vZHVsZXMiLCJtZWRpYSIsImRlZHVwZSIsInN1cHBvcnRzIiwibGF5ZXIiLCJ1bmRlZmluZWQiLCJhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzIiwiayIsIl9rIiwiY3NzTWFwcGluZyIsImJ0b2EiLCJiYXNlNjQiLCJ1bmVzY2FwZSIsImVuY29kZVVSSUNvbXBvbmVudCIsIkpTT04iLCJzdHJpbmdpZnkiLCJkYXRhIiwic291cmNlTWFwcGluZyIsInN0eWxlc0luRE9NIiwiZ2V0SW5kZXhCeUlkZW50aWZpZXIiLCJpZGVudGlmaWVyIiwicmVzdWx0IiwibW9kdWxlc1RvRG9tIiwib3B0aW9ucyIsImlkQ291bnRNYXAiLCJpZGVudGlmaWVycyIsImJhc2UiLCJjb3VudCIsImluZGV4QnlJZGVudGlmaWVyIiwib2JqIiwiY3NzIiwic291cmNlTWFwIiwicmVmZXJlbmNlcyIsInVwZGF0ZXIiLCJhZGRFbGVtZW50U3R5bGUiLCJieUluZGV4Iiwic3BsaWNlIiwiYXBpIiwiZG9tQVBJIiwidXBkYXRlIiwibmV3T2JqIiwicmVtb3ZlIiwibGFzdElkZW50aWZpZXJzIiwibmV3TGlzdCIsImluZGV4IiwibmV3TGFzdElkZW50aWZpZXJzIiwiX2kiLCJfaW5kZXgiLCJtZW1vIiwiaW5zZXJ0Iiwic3R5bGUiLCJ0YXJnZXQiLCJzdHlsZVRhcmdldCIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsIndpbmRvdyIsIkhUTUxJRnJhbWVFbGVtZW50IiwiY29udGVudERvY3VtZW50IiwiaGVhZCIsImUiLCJnZXRUYXJnZXQiLCJFcnJvciIsImFwcGVuZENoaWxkIiwiZWxlbWVudCIsImNyZWF0ZUVsZW1lbnQiLCJzZXRBdHRyaWJ1dGVzIiwiYXR0cmlidXRlcyIsInN0eWxlRWxlbWVudCIsIm5vbmNlIiwic2V0QXR0cmlidXRlIiwiaW5zZXJ0U3R5bGVFbGVtZW50Iiwic3R5bGVUYWdUcmFuc2Zvcm0iLCJhcHBseSIsInBhcmVudE5vZGUiLCJyZW1vdmVDaGlsZCIsInJlbW92ZVN0eWxlRWxlbWVudCIsInN0eWxlU2hlZXQiLCJjc3NUZXh0IiwiZmlyc3RDaGlsZCIsImNyZWF0ZVRleHROb2RlIiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiY2FjaGVkTW9kdWxlIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsIm4iLCJnZXR0ZXIiLCJfX2VzTW9kdWxlIiwiZCIsImEiLCJkZWZpbml0aW9uIiwia2V5IiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInByb3AiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJuYyIsImN1cnJlbnRQcm9qZWN0IiwibmFtZSIsInJldHVybkN1cnJlbnRQcm9qZWN0IiwicHJvamVjdERpc3BsYXlEb20iLCJzaWRlYmFyIiwiZ2V0RWxlbWVudEJ5SWQiLCJjaGlsZEVsZW1lbnRDb3VudCIsImxhc3RDaGlsZCIsImxvY2FsU3RvcmFnZSIsInRpdGxlIiwiYmFyIiwiaW5wdXRDb250YWluZXIiLCJ0ZXh0Q29udGVudCIsImFkZEV2ZW50TGlzdGVuZXIiLCJldmVudCIsImRpc3BsYXlUYXNrcyIsImNsYXNzTGlzdCIsIlRvZG8iLCJkZXNjcmlwdGlvbiIsImR1ZURhdGUiLCJwcmlvcml0eSIsIm5vdGVzIiwiY2xlYXJUYXNrSW5wdXQiLCJjaGlsZHJlbiIsIm5vZGVOYW1lIiwidmFsdWUiLCJhZGQiLCJ0YXNrRGlzcGxheSIsImN1cnJlbnRQcm9qZWN0VGFza3MiLCJnZXRJdGVtIiwicGFyc2UiLCJrZXlzIiwiY29uc29sZSIsImxvZyIsImNhcmQiLCJjYXJkVGl0bGUiLCJ2YWx1ZXMiLCJjYXJkRGVzYyIsImNhcmREdWUiLCJkYXRlIiwiY2FyZFByaW9yaXR5IiwiY2FyZE5vdGVzIiwibG9jYWxzIiwiaGVhZGVyIiwidGFza0NvbnRhaW5lciIsImJhY2tncm91bmRDb2xvciIsInByb2plY3RNZW51IiwibmV3UHJvamVjdEJ0biIsIm5ld1Rhc2tCdG4iLCJjbGVhckJ0biIsImNsZWFyIiwicHAiLCJ0ZXN0QnRucyIsInRpdGxlbGFiZWwiLCJpbm5lckhUTUwiLCJkZXNjIiwiZGVzY2xhYmVsIiwiZHVlIiwidHlwZSIsImR1ZWxhYmVsIiwidmFsIiwib3B0aW9uIiwidGV4dCIsImNoYXJBdCIsInRvVXBwZXJDYXNlIiwic2xpY2UiLCJwcmlvcml0eWxhYmVsIiwibm90ZXNsYWJlbCIsInN1Ym1pdEJ0biIsIngiLCJuZXdUYXNrIiwic2V0SXRlbSIsImFsbFRhc2tzIiwiYXNzaWduIiwiYWxlcnQiLCJ0YXNrU3RvcmFnZSIsInRlc3RJbnB1dFZhbHVlIiwidGFza0lucHV0cyIsInByb2plY3RNb2RhbCIsIm1vZGFsSGVhZGVyIiwibW9kYWxJbnB1dENvbnRhaW5lciIsInByb2plY3RUaXRsZSIsInByb2plY3RUaXRsZUxhYmVsIiwiY2FuY2VsQnRuIiwiYWRkQnRuIiwicHJvamVjdE5hbWUiLCJjdXJyZW50VGFyZ2V0IiwiZ2V0QXR0cmlidXRlIiwic3RvcmVQcm9qZWN0IiwicHJvamVjdElucHV0RE9NIiwib25jbGljayIsInByb2plY3RJbnB1dFJldmVhbCIsIndhc2hpbmciLCJjb29raW5nIiwieWFyZCJdLCJzb3VyY2VSb290IjoiIn0=